generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String     @unique
  first_name  String?
  last_name   String?
  role        Role
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  osteopathId Int?
  osteopath   Osteopath?
}

model Osteopath {
  id        Int       @id @default(autoincrement())
  userId    String    @unique @db.Uuid
  createdAt DateTime  @default(now())
  name      String
  updatedAt DateTime  @updatedAt
  cabinets  Cabinet[]
  user      User      @relation(fields: [userId], references: [id])
  patients  Patient[]
}

model Cabinet {
  id          Int       @id @default(autoincrement())
  address     String
  createdAt   DateTime  @default(now())
  name        String
  osteopathId Int
  phone       String?
  updatedAt   DateTime  @updatedAt
  osteopath   Osteopath @relation(fields: [osteopathId], references: [id])
  patients    Patient[]
}

model Patient {
  id               Int               @id @default(autoincrement())
  userId           String?
  firstName        String
  lastName         String
  osteopathId      Int
  cabinetId        Int?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  address          String?
  avatarUrl        String?
  birthDate        DateTime?
  height           Float?
  weight           Float?
  email            String?           @unique
  phone            String?
  maritalStatus    MaritalStatus?
  hasChildren      Boolean           @default(false)
  childrenAges     Int[]
  physicalActivity String?
  appointments     Appointment[]
  consultations    Consultation[]
  invoices         Invoice[]
  medicalDocuments MedicalDocument[]
  cabinet          Cabinet?          @relation(fields: [cabinetId], references: [id])
  osteopath        Osteopath         @relation(fields: [osteopathId], references: [id])
}

model Consultation {
  id                 Int                @id @default(autoincrement())
  date               DateTime
  notes              String
  patientId          Int
  patient            Patient            @relation(fields: [patientId], references: [id])
  invoice            Invoice?
  treatmentHistory   TreatmentHistory[]
  isCancelled        Boolean            @default(false)
  cancellationReason String?
}

model Appointment {
  id               Int               @id @default(autoincrement())
  date             DateTime
  reason           String
  patientId        Int
  status           AppointmentStatus
  patient          Patient           @relation(fields: [patientId], references: [id])
  notificationSent Boolean           @default(false)
}

model MedicalDocument {
  id          Int     @id @default(autoincrement())
  url         String
  description String
  patientId   Int
  patient     Patient @relation(fields: [patientId], references: [id])
}

model Invoice {
  id             Int           @id @default(autoincrement())
  date           DateTime      @default(now())
  amount         Float
  paymentStatus  PaymentStatus @default(PENDING)
  consultation   Consultation  @relation(fields: [consultationId], references: [id])
  consultationId Int           @unique
  patientId      Int
  patient        Patient       @relation(fields: [patientId], references: [id])
}

model TreatmentHistory {
  id             Int          @id @default(autoincrement())
  date           DateTime     @default(now())
  description    String
  consultationId Int
  consultation   Consultation @relation(fields: [consultationId], references: [id])
}

enum Role {
  ADMIN
  OSTEOPATH
}

enum Gender {
  Homme
  Femme
  Other
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
  SEPARATED
  ENGAGED
  PARTNERED
}

enum Handedness {
  LEFT
  RIGHT
  AMBIDEXTROUS
}

enum Contraception {
  NONE
  PILLS
  CONDOM
  IMPLANTS
  DIAPHRAGM
  IUD
  INJECTION
  PATCH
  RING
  NATURAL_METHODS
  STERILIZATION
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELED
  NO_SHOW
  RESCHEDULED
}

enum PaymentStatus {
  PAID
  PENDING
  CANCELED
}
