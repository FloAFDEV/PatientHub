// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Utilisateurs : Administrateurs et Ostéopathes
model User {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String     @unique
  first_name  String?
  last_name   String?
  role        Role
  osteopath   Osteopath? // Relation avec l'ostéopathe
  osteopathId Int? // Champ de clé étrangère pour l'ostéopathe
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt

  @@map("users") // Map to Supabase's users table
}

// Rôles possibles
enum Role {
  ADMIN
  OSTEOPATH
}

// Modèle Ostéopathes
model Osteopath {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @unique @db.Uuid
  cabinets  Cabinet[]
  patients  Patient[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// Modèle Cabinets
model Cabinet {
  id          Int       @id @default(autoincrement())
  name        String // Nom du cabinet
  address     String // Adresse du cabinet
  phone       String? // Numéro de téléphone du cabinet
  osteopath   Osteopath @relation(fields: [osteopathId], references: [id]) // Relation avec l'ostéopathe
  osteopathId Int
  patients    Patient[] // Patients associés à ce cabinet
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Modèle Patients
model Patient {
  id               Int               @id @default(autoincrement())
  name             String // Nom du patient
  email            String? // Email du patient
  phone            String? // Numéro de téléphone du patient
  birthDate        DateTime? // Date de naissance (format JJ/MM/AAAA)
  gender           Gender? // Genre (Homme/Femme)
  address          String? // Adresse
  avatarUrl        String? // URL de la photo/avatar du patient
  isDeceased       Boolean           @default(false) // Indique si le patient est décédé
  osteopath        Osteopath         @relation(fields: [osteopathId], references: [id]) // Relation avec l'ostéopathe
  osteopathId      Int
  cabinet          Cabinet           @relation(fields: [cabinetId], references: [id]) // Relation avec le cabinet
  cabinetId        Int
  medicalDocuments MedicalDocument[] // Documents médicaux (IRM, radios, etc.)
  consultations    Consultation[] // HDLM : Historique des consultations (consultations successives)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  Appointment      Appointment[]
}

// Modèle pour les consultations (HDLM)
model Consultation {
  id        Int      @id @default(autoincrement())
  date      DateTime // Date de la consultation
  notes     String // Notes de la consultation
  patient   Patient  @relation(fields: [patientId], references: [id]) // Relation avec le patient
  patientId Int
}

// Modèle pour les rendez-vous
model Appointment {
  id        Int      @id @default(autoincrement())
  date      DateTime // Date et heure du rendez-vous
  reason    String // Raison du rendez-vous
  status    String // Statut (scheduled, completed, canceled)
  patient   Patient  @relation(fields: [patientId], references: [id]) // Relation avec le patient
  patientId Int
}

// Modèle pour les documents médicaux
model MedicalDocument {
  id          Int     @id @default(autoincrement())
  url         String // URL du document médical (image, PDF, etc.)
  description String // Description du document (ex. IRM, radio, etc.)
  patient     Patient @relation(fields: [patientId], references: [id]) // Relation avec le patient
  patientId   Int
}

// Enums pour le genre
enum Gender {
  Homme
  Femme
}
