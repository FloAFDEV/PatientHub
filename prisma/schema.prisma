generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String     @unique
  first_name  String?
  last_name   String?
  role        Role
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  osteopathId Int?
  osteopath   Osteopath?
}

model Osteopath {
  id        Int       @id @default(autoincrement())
  userId    String    @unique @db.Uuid
  createdAt DateTime  @default(now())
  name      String
  updatedAt DateTime  @updatedAt
  cabinets  Cabinet[]
  user      User      @relation(fields: [userId], references: [id])
  patients  Patient[]
}

model Cabinet {
  id          Int       @id @default(autoincrement())
  address     String
  createdAt   DateTime  @default(now())
  name        String
  osteopathId Int
  phone       String?
  updatedAt   DateTime  @updatedAt
  osteopath   Osteopath @relation(fields: [osteopathId], references: [id])
  patients    Patient[]
}

model Patient {
  id                     Int               @id @default(autoincrement())
  userId                 String?
  name                   String
  osteopathId            Int
  cabinetId              Int?
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  address                String?
  avatarUrl              String?
  birthDate              DateTime?
  currentTreatment       String?
  digestiveProblems      String?
  email                  String?           @unique
  entDoctorName          String?
  entProblems            String?
  gender                 Gender?
  generalPractitioner    String?
  hasVisionCorrection    Boolean           @default(false)
  hdlm                   String?
  isDeceased             Boolean           @default(false)
  isSmoker               Boolean           @default(false)
  occupation             String?
  ophtalmologistName     String?
  phone                  String?
  rheumatologicalHistory String?
  surgicalHistory        String?
  traumaHistory          String?
  maritalStatus          MaritalStatus?
  contraception          Contraception?
  handedness             Handedness?
  childrenAges           Int[]
  hasChildren            String?
  physicalActivity       String?
  digestiveDoctorName    String?
  appointments           Appointment[]
  consultations          Consultation[]
  medicalDocuments       MedicalDocument[]
  cabinet                Cabinet?          @relation(fields: [cabinetId], references: [id])
  osteopath              Osteopath         @relation(fields: [osteopathId], references: [id])
}

model Consultation {
  id        Int      @id @default(autoincrement())
  date      DateTime
  notes     String
  patientId Int
  patient   Patient  @relation(fields: [patientId], references: [id])
}

model Appointment {
  id        Int               @id @default(autoincrement())
  date      DateTime
  reason    String
  patientId Int
  status    AppointmentStatus
  patient   Patient           @relation(fields: [patientId], references: [id])
}

model MedicalDocument {
  id          Int     @id @default(autoincrement())
  url         String
  description String
  patientId   Int
  patient     Patient @relation(fields: [patientId], references: [id])
}

enum Role {
  ADMIN
  OSTEOPATH
}

enum Gender {
  Homme
  Femme
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
  SEPARATED
}

enum Handedness {
  LEFT
  RIGHT
  AMBIDEXTROUS
}

enum Contraception {
  NONE
  PILLS
  CONDOM
  IMPLANTS
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELED
}
